# SNIK-Toolset, Maintainer: Konrad Höffner <konrad.hoeffner@imise.uni-leipzig.de>, originally Sebastian Stäubert  <sebastian.staeubert@imise.uni-leipzig.de>

services:

  virtuoso:
    image: openlink/virtuoso-opensource-7
    environment:
      - DBA_PASSWORD=${DBA_PASSWORD}
      - VIRT_DATABASE_ERRORLOGLEVEL=3
      - VIRT_PARAMETERS_NUMBEROFBUFFERS=10000
      - VIRT_PARAMETERS_MAXDIRTYBUFFERS=6000
      - VIRT_HTTPSERVER_SERVERPORT=8890
      - VIRT_SPARQL_DEFAULTGRAPH=http://www.snik.eu/ontology
      - VIRT_SPARQL_RESULTSETMAXROWS=50000
      - VIRT_SPARQL_MAXQUERYCOSTESTIMATIONTIME=400
      - VIRT_SPARQL_MAXQUERYEXECUTIONTIME=120
      - VIRT_SPARQL_DEFAULTQUERY=select distinct * {?s a meta:Role.} LIMIT 100
      - VIRT_PLUGINS_-=-
    volumes:
      - ./ontology:/database/data
      - ./virtuoso:/opt/virtuoso-opensource/initdb.d
      #- virtuoso-data:/database/data
      - ./ontology:/data/toLoad:ro
    profiles: ["virtuoso", "graph", "lodview"]
    ports:
      - "127.0.0.1:8080:8890"
      - "127.0.0.1:1111:1111"

  ontology:
    build: ./ontology
    volumes:
      - rdf:/ontology/dist
    profiles: ["rickview"]

  rickview:
    image: ghcr.io/konradhoeffner/rickview:master
    environment:
      - RICKVIEW_KB_FILE=/rdf/snik.ttl
      - RICKVIEW_PREFIX=sniko
      - RICKVIEW_NAMESPACE=http://www.snik.eu/ontology/
      - RICKVIEW_BASE=/ontology
      - RICKVIEW_TITLE=SNIK
      - RICKVIEW_SUBTITLE=Semantic Network of Information Management in Hospitals
      - RICKVIEW_EXAMPLES=meta bb ob meta/Top meta/EntityType meta/Function meta/Role bb/ChiefExecutiveOfficer ob/ChiefInformationOfficer
      - RICKVIEW_HOMEPAGE=https://www.snik.eu
      - RICKVIEW_ENDPOINT=https://www.snik.eu/sparql
      - RICKVIEW_GITHUB=https://github.com/snikproject/ontology
      - RICKVIEW_DOC=https://snikproject.github.io/ontology/index-en.html
      - CARGO_INCREMENTAL=0
    volumes:
      - rdf:/rdf
      - ./rickview.toml:/app/data/config.toml
    profiles: ["rickview"]
    ports:
      - "127.0.0.1:8889:8080"
    depends_on:
      - ontology
    restart: unless-stopped

  graph:
    build:
      context: ./graph
      args:
        # client side, so we use the port on the local machine
        - SPARQL_ENDPOINT=http://127.0.0.1:8080/sparql
    profiles: ["graph"]
    ports:
      - "127.0.0.1:8043:8043"
    depends_on:
      - virtuoso

  proxy:
    image: caddy:2-alpine
    profiles: ["proxy"]
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
    ports:
      - "127.0.0.1:80:80"

volumes:
  #virtuoso-data: # uncomment to persist the virtuoso volume but then you need to delete the volume when the ontology updates
  rdf:
